/* tslint:disable */
/* eslint-disable */
/**
 * My API Merin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RegistrationUserRequestDto,
  UserActiveRequestDto,
} from '../models/index';
import {
    RegistrationUserRequestDtoFromJSON,
    RegistrationUserRequestDtoToJSON,
    UserActiveRequestDtoFromJSON,
    UserActiveRequestDtoToJSON,
} from '../models/index';

export interface ApiRegistrationActivePostRequest {
    userActiveRequestDto?: UserActiveRequestDto;
}

export interface ApiRegistrationUserPostRequest {
    registrationUserRequestDto?: RegistrationUserRequestDto;
}

/**
 * 
 */
export class RegistrationApi extends runtime.BaseAPI {

    /**
     */
    async apiRegistrationActivePostRaw(requestParameters: ApiRegistrationActivePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Registration/active`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserActiveRequestDtoToJSON(requestParameters['userActiveRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiRegistrationActivePost(requestParameters: ApiRegistrationActivePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRegistrationActivePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiRegistrationUserPostRaw(requestParameters: ApiRegistrationUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Registration/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrationUserRequestDtoToJSON(requestParameters['registrationUserRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiRegistrationUserPost(requestParameters: ApiRegistrationUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRegistrationUserPostRaw(requestParameters, initOverrides);
    }

}
