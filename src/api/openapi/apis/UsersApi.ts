/* tslint:disable */
/* eslint-disable */
/**
 * My API Merin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminUserDetailResponseDto,
  BanUserRequestDto,
  UserSettingsRequestDto,
  UserSettingsResponseDto,
  UserTransportVerificationRequestDto,
} from '../models/index';
import {
    AdminUserDetailResponseDtoFromJSON,
    AdminUserDetailResponseDtoToJSON,
    BanUserRequestDtoFromJSON,
    BanUserRequestDtoToJSON,
    UserSettingsRequestDtoFromJSON,
    UserSettingsRequestDtoToJSON,
    UserSettingsResponseDtoFromJSON,
    UserSettingsResponseDtoToJSON,
    UserTransportVerificationRequestDtoFromJSON,
    UserTransportVerificationRequestDtoToJSON,
} from '../models/index';

export interface ApiUsersBanPostRequest {
    banUserRequestDto?: BanUserRequestDto;
}

export interface ApiUsersSettingsPostRequest {
    userSettingsRequestDto?: UserSettingsRequestDto;
}

export interface ApiUsersTransportRequirementsPhotosPostRequest {
    concessionDocuments?: Blob;
    businessRiskInsurance?: Blob;
}

export interface ApiUsersUserTransportVerificationPostRequest {
    userTransportVerificationRequestDto?: UserTransportVerificationRequestDto;
}

export interface ApiUsersUsersGetRequest {
    limit: number;
    offset: number;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async apiUsersBanPostRaw(requestParameters: ApiUsersBanPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/ban`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BanUserRequestDtoToJSON(requestParameters['banUserRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersBanPost(requestParameters: ApiUsersBanPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersBanPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUsersSettingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettingsResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSettingsResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiUsersSettingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettingsResponseDto> {
        const response = await this.apiUsersSettingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUsersSettingsPostRaw(requestParameters: ApiUsersSettingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSettingsRequestDtoToJSON(requestParameters['userSettingsRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersSettingsPost(requestParameters: ApiUsersSettingsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersSettingsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUsersTransportRequirementsPhotosPostRaw(requestParameters: ApiUsersTransportRequirementsPhotosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['concessionDocuments'] != null) {
            formParams.append('ConcessionDocuments', requestParameters['concessionDocuments'] as any);
        }

        if (requestParameters['businessRiskInsurance'] != null) {
            formParams.append('BusinessRiskInsurance', requestParameters['businessRiskInsurance'] as any);
        }


        let urlPath = `/api/Users/transportRequirementsPhotos`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersTransportRequirementsPhotosPost(requestParameters: ApiUsersTransportRequirementsPhotosPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersTransportRequirementsPhotosPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUsersUserTransportVerificationPostRaw(requestParameters: ApiUsersUserTransportVerificationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/userTransportVerification`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserTransportVerificationRequestDtoToJSON(requestParameters['userTransportVerificationRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersUserTransportVerificationPost(requestParameters: ApiUsersUserTransportVerificationPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersUserTransportVerificationPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUsersUsersGetRaw(requestParameters: ApiUsersUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdminUserDetailResponseDto>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling apiUsersUsersGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling apiUsersUsersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['Limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['Offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdminUserDetailResponseDtoFromJSON));
    }

    /**
     */
    async apiUsersUsersGet(requestParameters: ApiUsersUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdminUserDetailResponseDto>> {
        const response = await this.apiUsersUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
