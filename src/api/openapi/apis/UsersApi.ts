/* tslint:disable */
/* eslint-disable */
/**
 * My API Merin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminUserDetailResponseDto,
  BanUserRequestDto,
  TransportDocumentsCompleteUploadFilesRequestDto,
  TransportRequirementsCreateUploadUrlFilesRequestDto,
  TransportRequirementsRequestDto,
  TransportRequirementsSendToVerificationRequestDto,
  TransportRequirementsUploadSasUrlResponseDto,
  TransportRequirementsVerificationRequestDto,
  TransporterRequirementsResponseDto,
  UserSettingsRequestDto,
  UserSettingsResponseDto,
} from '../models/index';
import {
    AdminUserDetailResponseDtoFromJSON,
    AdminUserDetailResponseDtoToJSON,
    BanUserRequestDtoFromJSON,
    BanUserRequestDtoToJSON,
    TransportDocumentsCompleteUploadFilesRequestDtoFromJSON,
    TransportDocumentsCompleteUploadFilesRequestDtoToJSON,
    TransportRequirementsCreateUploadUrlFilesRequestDtoFromJSON,
    TransportRequirementsCreateUploadUrlFilesRequestDtoToJSON,
    TransportRequirementsRequestDtoFromJSON,
    TransportRequirementsRequestDtoToJSON,
    TransportRequirementsSendToVerificationRequestDtoFromJSON,
    TransportRequirementsSendToVerificationRequestDtoToJSON,
    TransportRequirementsUploadSasUrlResponseDtoFromJSON,
    TransportRequirementsUploadSasUrlResponseDtoToJSON,
    TransportRequirementsVerificationRequestDtoFromJSON,
    TransportRequirementsVerificationRequestDtoToJSON,
    TransporterRequirementsResponseDtoFromJSON,
    TransporterRequirementsResponseDtoToJSON,
    UserSettingsRequestDtoFromJSON,
    UserSettingsRequestDtoToJSON,
    UserSettingsResponseDtoFromJSON,
    UserSettingsResponseDtoToJSON,
} from '../models/index';

export interface ApiUsersBanPostRequest {
    banUserRequestDto?: BanUserRequestDto;
}

export interface ApiUsersSendTransportRequirementsToVerificationPostRequest {
    transportRequirementsSendToVerificationRequestDto?: TransportRequirementsSendToVerificationRequestDto;
}

export interface ApiUsersSettingsPostRequest {
    userSettingsRequestDto?: UserSettingsRequestDto;
}

export interface ApiUsersTransportRequirementsCompleteDocumentUploadPostRequest {
    transportDocumentsCompleteUploadFilesRequestDto?: TransportDocumentsCompleteUploadFilesRequestDto;
}

export interface ApiUsersTransportRequirementsCreateUploadDocumentPostRequest {
    transportRequirementsCreateUploadUrlFilesRequestDto?: TransportRequirementsCreateUploadUrlFilesRequestDto;
}

export interface ApiUsersTransportRequirementsPostRequest {
    transportRequirementsRequestDto?: TransportRequirementsRequestDto;
}

export interface ApiUsersTransportRequirementsVerificationPostRequest {
    transportRequirementsVerificationRequestDto?: TransportRequirementsVerificationRequestDto;
}

export interface ApiUsersUserTransportRequirementsGetRequest {
    userId: number;
}

export interface ApiUsersUsersGetRequest {
    limit: number;
    offset: number;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async apiUsersBanPostRaw(requestParameters: ApiUsersBanPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/ban`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BanUserRequestDtoToJSON(requestParameters['banUserRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersBanPost(requestParameters: ApiUsersBanPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersBanPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUsersSendTransportRequirementsToVerificationPostRaw(requestParameters: ApiUsersSendTransportRequirementsToVerificationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/sendTransportRequirementsToVerification`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransportRequirementsSendToVerificationRequestDtoToJSON(requestParameters['transportRequirementsSendToVerificationRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersSendTransportRequirementsToVerificationPost(requestParameters: ApiUsersSendTransportRequirementsToVerificationPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersSendTransportRequirementsToVerificationPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUsersSettingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettingsResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSettingsResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiUsersSettingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettingsResponseDto> {
        const response = await this.apiUsersSettingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUsersSettingsPostRaw(requestParameters: ApiUsersSettingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSettingsRequestDtoToJSON(requestParameters['userSettingsRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersSettingsPost(requestParameters: ApiUsersSettingsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersSettingsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUsersTransportRequirementsCompleteDocumentUploadPostRaw(requestParameters: ApiUsersTransportRequirementsCompleteDocumentUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/transportRequirementsCompleteDocumentUpload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransportDocumentsCompleteUploadFilesRequestDtoToJSON(requestParameters['transportDocumentsCompleteUploadFilesRequestDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiUsersTransportRequirementsCompleteDocumentUploadPost(requestParameters: ApiUsersTransportRequirementsCompleteDocumentUploadPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.apiUsersTransportRequirementsCompleteDocumentUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUsersTransportRequirementsCreateUploadDocumentPostRaw(requestParameters: ApiUsersTransportRequirementsCreateUploadDocumentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransportRequirementsUploadSasUrlResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/transportRequirementsCreateUploadDocument`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransportRequirementsCreateUploadUrlFilesRequestDtoToJSON(requestParameters['transportRequirementsCreateUploadUrlFilesRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransportRequirementsUploadSasUrlResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiUsersTransportRequirementsCreateUploadDocumentPost(requestParameters: ApiUsersTransportRequirementsCreateUploadDocumentPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransportRequirementsUploadSasUrlResponseDto> {
        const response = await this.apiUsersTransportRequirementsCreateUploadDocumentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUsersTransportRequirementsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransporterRequirementsResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/transportRequirements`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransporterRequirementsResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiUsersTransportRequirementsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransporterRequirementsResponseDto> {
        const response = await this.apiUsersTransportRequirementsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUsersTransportRequirementsPostRaw(requestParameters: ApiUsersTransportRequirementsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/transportRequirements`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransportRequirementsRequestDtoToJSON(requestParameters['transportRequirementsRequestDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiUsersTransportRequirementsPost(requestParameters: ApiUsersTransportRequirementsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.apiUsersTransportRequirementsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUsersTransportRequirementsVerificationPostRaw(requestParameters: ApiUsersTransportRequirementsVerificationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/transportRequirementsVerification`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransportRequirementsVerificationRequestDtoToJSON(requestParameters['transportRequirementsVerificationRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersTransportRequirementsVerificationPost(requestParameters: ApiUsersTransportRequirementsVerificationPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersTransportRequirementsVerificationPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUsersUserTransportRequirementsGetRaw(requestParameters: ApiUsersUserTransportRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransporterRequirementsResponseDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiUsersUserTransportRequirementsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['UserId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/userTransportRequirements`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransporterRequirementsResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiUsersUserTransportRequirementsGet(requestParameters: ApiUsersUserTransportRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransporterRequirementsResponseDto> {
        const response = await this.apiUsersUserTransportRequirementsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUsersUsersGetRaw(requestParameters: ApiUsersUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdminUserDetailResponseDto>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling apiUsersUsersGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling apiUsersUsersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['Limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['Offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Users/users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdminUserDetailResponseDtoFromJSON));
    }

    /**
     */
    async apiUsersUsersGet(requestParameters: ApiUsersUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdminUserDetailResponseDto>> {
        const response = await this.apiUsersUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
