/* tslint:disable */
/* eslint-disable */
/**
 * My API Merin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddVehicleRequestDto,
  CompleteUploadVehicleFilesRequestDto,
  CreateUploadUrlForVehicleFilesRequestDto,
  UpdateVehicleRequestDto,
  UploadVehicleFilesSasUrlResponseDto,
  VehicleResponseDto,
  VehicleTransportVerificationRequestDto,
  VehicleVerificationRequestDto,
} from '../models/index';
import {
    AddVehicleRequestDtoFromJSON,
    AddVehicleRequestDtoToJSON,
    CompleteUploadVehicleFilesRequestDtoFromJSON,
    CompleteUploadVehicleFilesRequestDtoToJSON,
    CreateUploadUrlForVehicleFilesRequestDtoFromJSON,
    CreateUploadUrlForVehicleFilesRequestDtoToJSON,
    UpdateVehicleRequestDtoFromJSON,
    UpdateVehicleRequestDtoToJSON,
    UploadVehicleFilesSasUrlResponseDtoFromJSON,
    UploadVehicleFilesSasUrlResponseDtoToJSON,
    VehicleResponseDtoFromJSON,
    VehicleResponseDtoToJSON,
    VehicleTransportVerificationRequestDtoFromJSON,
    VehicleTransportVerificationRequestDtoToJSON,
    VehicleVerificationRequestDtoFromJSON,
    VehicleVerificationRequestDtoToJSON,
} from '../models/index';

export interface ApiVehiclesCompleteFileUploadPostRequest {
    completeUploadVehicleFilesRequestDto?: CompleteUploadVehicleFilesRequestDto;
}

export interface ApiVehiclesCreateUploadFilesPostRequest {
    createUploadUrlForVehicleFilesRequestDto?: CreateUploadUrlForVehicleFilesRequestDto;
}

export interface ApiVehiclesSendVehicleToVerificationPostRequest {
    vehicleVerificationRequestDto?: VehicleVerificationRequestDto;
}

export interface ApiVehiclesTransportVerificationPostRequest {
    vehicleTransportVerificationRequestDto?: VehicleTransportVerificationRequestDto;
}

export interface ApiVehiclesUploadPublicVehiclePhotosPostRequest {
    id: number;
    photoIds?: Array<number>;
    photoFiles?: Array<Blob>;
    photoIdsToDelete?: Array<number>;
}

export interface ApiVehiclesVehicleGetRequest {
    idVehicle: number;
}

export interface ApiVehiclesVehiclePostRequest {
    addVehicleRequestDto?: AddVehicleRequestDto;
}

export interface ApiVehiclesVehiclePutRequest {
    updateVehicleRequestDto?: UpdateVehicleRequestDto;
}

/**
 * 
 */
export class VehiclesApi extends runtime.BaseAPI {

    /**
     */
    async apiVehiclesCompleteFileUploadPostRaw(requestParameters: ApiVehiclesCompleteFileUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/completeFileUpload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompleteUploadVehicleFilesRequestDtoToJSON(requestParameters['completeUploadVehicleFilesRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVehiclesCompleteFileUploadPost(requestParameters: ApiVehiclesCompleteFileUploadPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVehiclesCompleteFileUploadPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVehiclesCreateUploadFilesPostRaw(requestParameters: ApiVehiclesCreateUploadFilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadVehicleFilesSasUrlResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/createUploadFiles`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUploadUrlForVehicleFilesRequestDtoToJSON(requestParameters['createUploadUrlForVehicleFilesRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadVehicleFilesSasUrlResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiVehiclesCreateUploadFilesPost(requestParameters: ApiVehiclesCreateUploadFilesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadVehicleFilesSasUrlResponseDto> {
        const response = await this.apiVehiclesCreateUploadFilesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVehiclesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VehicleResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VehicleResponseDtoFromJSON));
    }

    /**
     */
    async apiVehiclesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VehicleResponseDto>> {
        const response = await this.apiVehiclesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVehiclesSendVehicleToVerificationPostRaw(requestParameters: ApiVehiclesSendVehicleToVerificationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/sendVehicleToVerification`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleVerificationRequestDtoToJSON(requestParameters['vehicleVerificationRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVehiclesSendVehicleToVerificationPost(requestParameters: ApiVehiclesSendVehicleToVerificationPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVehiclesSendVehicleToVerificationPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVehiclesTransportVerificationPostRaw(requestParameters: ApiVehiclesTransportVerificationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/transportVerification`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleTransportVerificationRequestDtoToJSON(requestParameters['vehicleTransportVerificationRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVehiclesTransportVerificationPost(requestParameters: ApiVehiclesTransportVerificationPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVehiclesTransportVerificationPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVehiclesUploadPublicVehiclePhotosPostRaw(requestParameters: ApiVehiclesUploadPublicVehiclePhotosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiVehiclesUploadPublicVehiclePhotosPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['id'] != null) {
            formParams.append('Id', requestParameters['id'] as any);
        }

        if (requestParameters['photoIds'] != null) {
            requestParameters['photoIds'].forEach((element) => {
                formParams.append('PhotoIds', element as any);
            })
        }

        if (requestParameters['photoFiles'] != null) {
            requestParameters['photoFiles'].forEach((element) => {
                formParams.append('PhotoFiles', element as any);
            })
        }

        if (requestParameters['photoIdsToDelete'] != null) {
            requestParameters['photoIdsToDelete'].forEach((element) => {
                formParams.append('PhotoIdsToDelete', element as any);
            })
        }


        let urlPath = `/api/Vehicles/uploadPublicVehiclePhotos`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVehiclesUploadPublicVehiclePhotosPost(requestParameters: ApiVehiclesUploadPublicVehiclePhotosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVehiclesUploadPublicVehiclePhotosPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVehiclesVehicleGetRaw(requestParameters: ApiVehiclesVehicleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleResponseDto>> {
        if (requestParameters['idVehicle'] == null) {
            throw new runtime.RequiredError(
                'idVehicle',
                'Required parameter "idVehicle" was null or undefined when calling apiVehiclesVehicleGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['idVehicle'] != null) {
            queryParameters['IdVehicle'] = requestParameters['idVehicle'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/vehicle`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiVehiclesVehicleGet(requestParameters: ApiVehiclesVehicleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleResponseDto> {
        const response = await this.apiVehiclesVehicleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVehiclesVehiclePostRaw(requestParameters: ApiVehiclesVehiclePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/vehicle`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddVehicleRequestDtoToJSON(requestParameters['addVehicleRequestDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiVehiclesVehiclePost(requestParameters: ApiVehiclesVehiclePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.apiVehiclesVehiclePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVehiclesVehiclePutRaw(requestParameters: ApiVehiclesVehiclePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/vehicle`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVehicleRequestDtoToJSON(requestParameters['updateVehicleRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVehiclesVehiclePut(requestParameters: ApiVehiclesVehiclePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVehiclesVehiclePutRaw(requestParameters, initOverrides);
    }

}
