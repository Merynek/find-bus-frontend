/* tslint:disable */
/* eslint-disable */
/**
 * My API Merin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddVehicleRequestDto,
  UpdateVehicleRequestDto,
  VehicleCompletePublicUploadPhotosRequestDto,
  VehicleCompleteUploadFilesRequestDto,
  VehicleCreatePublicUploadUrlPhotosRequestDto,
  VehicleCreateUploadUrlFilesRequestDto,
  VehiclePublicUploadSasUrlResponseDto,
  VehicleResponseDto,
  VehicleTransportVerificationRequestDto,
  VehicleUploadSasUrlResponseDto,
  VehicleVerificationRequestDto,
} from '../models/index';
import {
    AddVehicleRequestDtoFromJSON,
    AddVehicleRequestDtoToJSON,
    UpdateVehicleRequestDtoFromJSON,
    UpdateVehicleRequestDtoToJSON,
    VehicleCompletePublicUploadPhotosRequestDtoFromJSON,
    VehicleCompletePublicUploadPhotosRequestDtoToJSON,
    VehicleCompleteUploadFilesRequestDtoFromJSON,
    VehicleCompleteUploadFilesRequestDtoToJSON,
    VehicleCreatePublicUploadUrlPhotosRequestDtoFromJSON,
    VehicleCreatePublicUploadUrlPhotosRequestDtoToJSON,
    VehicleCreateUploadUrlFilesRequestDtoFromJSON,
    VehicleCreateUploadUrlFilesRequestDtoToJSON,
    VehiclePublicUploadSasUrlResponseDtoFromJSON,
    VehiclePublicUploadSasUrlResponseDtoToJSON,
    VehicleResponseDtoFromJSON,
    VehicleResponseDtoToJSON,
    VehicleTransportVerificationRequestDtoFromJSON,
    VehicleTransportVerificationRequestDtoToJSON,
    VehicleUploadSasUrlResponseDtoFromJSON,
    VehicleUploadSasUrlResponseDtoToJSON,
    VehicleVerificationRequestDtoFromJSON,
    VehicleVerificationRequestDtoToJSON,
} from '../models/index';

export interface ApiVehiclesCompleteFileUploadPostRequest {
    vehicleCompleteUploadFilesRequestDto?: VehicleCompleteUploadFilesRequestDto;
}

export interface ApiVehiclesCompletePublicPhotosUploadPostRequest {
    vehicleCompletePublicUploadPhotosRequestDto?: VehicleCompletePublicUploadPhotosRequestDto;
}

export interface ApiVehiclesCreatePublicUploadPhotosPostRequest {
    vehicleCreatePublicUploadUrlPhotosRequestDto?: VehicleCreatePublicUploadUrlPhotosRequestDto;
}

export interface ApiVehiclesCreateUploadFilesPostRequest {
    vehicleCreateUploadUrlFilesRequestDto?: VehicleCreateUploadUrlFilesRequestDto;
}

export interface ApiVehiclesGetRequest {
    verified?: boolean;
}

export interface ApiVehiclesSendVehicleToVerificationPostRequest {
    vehicleVerificationRequestDto?: VehicleVerificationRequestDto;
}

export interface ApiVehiclesTransportVerificationPostRequest {
    vehicleTransportVerificationRequestDto?: VehicleTransportVerificationRequestDto;
}

export interface ApiVehiclesVehicleGetRequest {
    idVehicle: number;
}

export interface ApiVehiclesVehiclePostRequest {
    addVehicleRequestDto?: AddVehicleRequestDto;
}

export interface ApiVehiclesVehiclePutRequest {
    updateVehicleRequestDto?: UpdateVehicleRequestDto;
}

/**
 * 
 */
export class VehiclesApi extends runtime.BaseAPI {

    /**
     */
    async apiVehiclesCompleteFileUploadPostRaw(requestParameters: ApiVehiclesCompleteFileUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/completeFileUpload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleCompleteUploadFilesRequestDtoToJSON(requestParameters['vehicleCompleteUploadFilesRequestDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiVehiclesCompleteFileUploadPost(requestParameters: ApiVehiclesCompleteFileUploadPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.apiVehiclesCompleteFileUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVehiclesCompletePublicPhotosUploadPostRaw(requestParameters: ApiVehiclesCompletePublicPhotosUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/completePublicPhotosUpload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleCompletePublicUploadPhotosRequestDtoToJSON(requestParameters['vehicleCompletePublicUploadPhotosRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVehiclesCompletePublicPhotosUploadPost(requestParameters: ApiVehiclesCompletePublicPhotosUploadPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVehiclesCompletePublicPhotosUploadPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVehiclesCreatePublicUploadPhotosPostRaw(requestParameters: ApiVehiclesCreatePublicUploadPhotosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehiclePublicUploadSasUrlResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/createPublicUploadPhotos`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleCreatePublicUploadUrlPhotosRequestDtoToJSON(requestParameters['vehicleCreatePublicUploadUrlPhotosRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehiclePublicUploadSasUrlResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiVehiclesCreatePublicUploadPhotosPost(requestParameters: ApiVehiclesCreatePublicUploadPhotosPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehiclePublicUploadSasUrlResponseDto> {
        const response = await this.apiVehiclesCreatePublicUploadPhotosPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVehiclesCreateUploadFilesPostRaw(requestParameters: ApiVehiclesCreateUploadFilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleUploadSasUrlResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/createUploadFiles`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleCreateUploadUrlFilesRequestDtoToJSON(requestParameters['vehicleCreateUploadUrlFilesRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleUploadSasUrlResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiVehiclesCreateUploadFilesPost(requestParameters: ApiVehiclesCreateUploadFilesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleUploadSasUrlResponseDto> {
        const response = await this.apiVehiclesCreateUploadFilesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVehiclesGetRaw(requestParameters: ApiVehiclesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VehicleResponseDto>>> {
        const queryParameters: any = {};

        if (requestParameters['verified'] != null) {
            queryParameters['Verified'] = requestParameters['verified'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VehicleResponseDtoFromJSON));
    }

    /**
     */
    async apiVehiclesGet(requestParameters: ApiVehiclesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VehicleResponseDto>> {
        const response = await this.apiVehiclesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVehiclesSendVehicleToVerificationPostRaw(requestParameters: ApiVehiclesSendVehicleToVerificationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/sendVehicleToVerification`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleVerificationRequestDtoToJSON(requestParameters['vehicleVerificationRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVehiclesSendVehicleToVerificationPost(requestParameters: ApiVehiclesSendVehicleToVerificationPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVehiclesSendVehicleToVerificationPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVehiclesTransportVerificationPostRaw(requestParameters: ApiVehiclesTransportVerificationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/transportVerification`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleTransportVerificationRequestDtoToJSON(requestParameters['vehicleTransportVerificationRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVehiclesTransportVerificationPost(requestParameters: ApiVehiclesTransportVerificationPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVehiclesTransportVerificationPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVehiclesVehicleGetRaw(requestParameters: ApiVehiclesVehicleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleResponseDto>> {
        if (requestParameters['idVehicle'] == null) {
            throw new runtime.RequiredError(
                'idVehicle',
                'Required parameter "idVehicle" was null or undefined when calling apiVehiclesVehicleGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['idVehicle'] != null) {
            queryParameters['IdVehicle'] = requestParameters['idVehicle'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/vehicle`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiVehiclesVehicleGet(requestParameters: ApiVehiclesVehicleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleResponseDto> {
        const response = await this.apiVehiclesVehicleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVehiclesVehiclePostRaw(requestParameters: ApiVehiclesVehiclePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/vehicle`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddVehicleRequestDtoToJSON(requestParameters['addVehicleRequestDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiVehiclesVehiclePost(requestParameters: ApiVehiclesVehiclePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.apiVehiclesVehiclePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVehiclesVehiclePutRaw(requestParameters: ApiVehiclesVehiclePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Vehicles/vehicle`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVehicleRequestDtoToJSON(requestParameters['updateVehicleRequestDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiVehiclesVehiclePut(requestParameters: ApiVehiclesVehiclePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.apiVehiclesVehiclePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
