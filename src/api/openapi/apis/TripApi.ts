/* tslint:disable */
/* eslint-disable */
/**
 * My API Merin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTripRequestDto,
  TripItemResponseDto,
  TripRecommendationRequestDto,
  TripRecommendationResponseDto,
  TripResponseDto,
} from '../models/index';
import {
    CreateTripRequestDtoFromJSON,
    CreateTripRequestDtoToJSON,
    TripItemResponseDtoFromJSON,
    TripItemResponseDtoToJSON,
    TripRecommendationRequestDtoFromJSON,
    TripRecommendationRequestDtoToJSON,
    TripRecommendationResponseDtoFromJSON,
    TripRecommendationResponseDtoToJSON,
    TripResponseDtoFromJSON,
    TripResponseDtoToJSON,
} from '../models/index';

export interface ApiTripListGetRequest {
    limit: number;
    offset: number;
    start?: Date;
    maxNumberOfPersons?: number;
    dietForTransporter?: boolean;
    onlyMine?: boolean;
    meOffered?: boolean;
    distanceFromInMeters?: number;
    distanceToInMeters?: number;
    maxDistanceInMeters?: number;
}

export interface ApiTripPostRequest {
    createTripRequestDto?: CreateTripRequestDto;
}

export interface ApiTripRecommendationPostRequest {
    tripRecommendationRequestDto?: TripRecommendationRequestDto;
}

export interface ApiTripTripGetRequest {
    tripId: number;
}

/**
 * 
 */
export class TripApi extends runtime.BaseAPI {

    /**
     */
    async apiTripListGetRaw(requestParameters: ApiTripListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TripItemResponseDto>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling apiTripListGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling apiTripListGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['Limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['Offset'] = requestParameters['offset'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['Start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['maxNumberOfPersons'] != null) {
            queryParameters['MaxNumberOfPersons'] = requestParameters['maxNumberOfPersons'];
        }

        if (requestParameters['dietForTransporter'] != null) {
            queryParameters['DietForTransporter'] = requestParameters['dietForTransporter'];
        }

        if (requestParameters['onlyMine'] != null) {
            queryParameters['OnlyMine'] = requestParameters['onlyMine'];
        }

        if (requestParameters['meOffered'] != null) {
            queryParameters['MeOffered'] = requestParameters['meOffered'];
        }

        if (requestParameters['distanceFromInMeters'] != null) {
            queryParameters['DistanceFromInMeters'] = requestParameters['distanceFromInMeters'];
        }

        if (requestParameters['distanceToInMeters'] != null) {
            queryParameters['DistanceToInMeters'] = requestParameters['distanceToInMeters'];
        }

        if (requestParameters['maxDistanceInMeters'] != null) {
            queryParameters['MaxDistanceInMeters'] = requestParameters['maxDistanceInMeters'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Trip/list`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TripItemResponseDtoFromJSON));
    }

    /**
     */
    async apiTripListGet(requestParameters: ApiTripListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TripItemResponseDto>> {
        const response = await this.apiTripListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTripPostRaw(requestParameters: ApiTripPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Trip`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTripRequestDtoToJSON(requestParameters['createTripRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTripPost(requestParameters: ApiTripPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTripPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTripRecommendationPostRaw(requestParameters: ApiTripRecommendationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TripRecommendationResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Trip/recommendation`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TripRecommendationRequestDtoToJSON(requestParameters['tripRecommendationRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TripRecommendationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiTripRecommendationPost(requestParameters: ApiTripRecommendationPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TripRecommendationResponseDto> {
        const response = await this.apiTripRecommendationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTripTripGetRaw(requestParameters: ApiTripTripGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TripResponseDto>> {
        if (requestParameters['tripId'] == null) {
            throw new runtime.RequiredError(
                'tripId',
                'Required parameter "tripId" was null or undefined when calling apiTripTripGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tripId'] != null) {
            queryParameters['TripId'] = requestParameters['tripId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Trip/trip`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TripResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiTripTripGet(requestParameters: ApiTripTripGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TripResponseDto> {
        const response = await this.apiTripTripGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
