/* tslint:disable */
/* eslint-disable */
/**
 * My API Merin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcceptOfferRequestDto,
  CloseTripRequestDto,
  CreateOfferRequestDto,
  DeleteTripOfferRequestDto,
  FinancialDocumentType,
  FinishTripRequestDto,
  PayedOfferRequestDto,
  StartTripRequestDto,
  TripOfferMovementsResponseDto,
  TripOfferResponseDto,
  UpdateOfferRequestDto,
} from '../models/index';
import {
    AcceptOfferRequestDtoFromJSON,
    AcceptOfferRequestDtoToJSON,
    CloseTripRequestDtoFromJSON,
    CloseTripRequestDtoToJSON,
    CreateOfferRequestDtoFromJSON,
    CreateOfferRequestDtoToJSON,
    DeleteTripOfferRequestDtoFromJSON,
    DeleteTripOfferRequestDtoToJSON,
    FinancialDocumentTypeFromJSON,
    FinancialDocumentTypeToJSON,
    FinishTripRequestDtoFromJSON,
    FinishTripRequestDtoToJSON,
    PayedOfferRequestDtoFromJSON,
    PayedOfferRequestDtoToJSON,
    StartTripRequestDtoFromJSON,
    StartTripRequestDtoToJSON,
    TripOfferMovementsResponseDtoFromJSON,
    TripOfferMovementsResponseDtoToJSON,
    TripOfferResponseDtoFromJSON,
    TripOfferResponseDtoToJSON,
    UpdateOfferRequestDtoFromJSON,
    UpdateOfferRequestDtoToJSON,
} from '../models/index';

export interface ApiTripOfferAcceptOfferPostRequest {
    acceptOfferRequestDto?: AcceptOfferRequestDto;
}

export interface ApiTripOfferCloseTripPostRequest {
    closeTripRequestDto?: CloseTripRequestDto;
}

export interface ApiTripOfferDownloadDocumentGetRequest {
    documentId: number;
    type: FinancialDocumentType;
}

export interface ApiTripOfferFinishTripPostRequest {
    finishTripRequestDto?: FinishTripRequestDto;
}

export interface ApiTripOfferGetTripOffersGetRequest {
    tripId: number;
}

export interface ApiTripOfferOfferDeleteRequest {
    deleteTripOfferRequestDto?: DeleteTripOfferRequestDto;
}

export interface ApiTripOfferOfferPostRequest {
    createOfferRequestDto?: CreateOfferRequestDto;
}

export interface ApiTripOfferOfferPutRequest {
    updateOfferRequestDto?: UpdateOfferRequestDto;
}

export interface ApiTripOfferPayedOfferPostRequest {
    payedOfferRequestDto?: PayedOfferRequestDto;
}

export interface ApiTripOfferStartTripPostRequest {
    startTripRequestDto?: StartTripRequestDto;
}

export interface ApiTripOfferStateMovementsGetRequest {
    tripId: number;
}

/**
 * 
 */
export class TripOfferApi extends runtime.BaseAPI {

    /**
     */
    async apiTripOfferAcceptOfferPostRaw(requestParameters: ApiTripOfferAcceptOfferPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/TripOffer/acceptOffer`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcceptOfferRequestDtoToJSON(requestParameters['acceptOfferRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTripOfferAcceptOfferPost(requestParameters: ApiTripOfferAcceptOfferPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTripOfferAcceptOfferPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTripOfferCloseTripPostRaw(requestParameters: ApiTripOfferCloseTripPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/TripOffer/closeTrip`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloseTripRequestDtoToJSON(requestParameters['closeTripRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTripOfferCloseTripPost(requestParameters: ApiTripOfferCloseTripPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTripOfferCloseTripPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTripOfferDownloadDocumentGetRaw(requestParameters: ApiTripOfferDownloadDocumentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling apiTripOfferDownloadDocumentGet().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling apiTripOfferDownloadDocumentGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['documentId'] != null) {
            queryParameters['documentId'] = requestParameters['documentId'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/TripOffer/downloadDocument`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async apiTripOfferDownloadDocumentGet(requestParameters: ApiTripOfferDownloadDocumentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.apiTripOfferDownloadDocumentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTripOfferFinishTripPostRaw(requestParameters: ApiTripOfferFinishTripPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/TripOffer/finishTrip`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FinishTripRequestDtoToJSON(requestParameters['finishTripRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTripOfferFinishTripPost(requestParameters: ApiTripOfferFinishTripPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTripOfferFinishTripPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTripOfferGetTripOffersGetRaw(requestParameters: ApiTripOfferGetTripOffersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TripOfferResponseDto>>> {
        if (requestParameters['tripId'] == null) {
            throw new runtime.RequiredError(
                'tripId',
                'Required parameter "tripId" was null or undefined when calling apiTripOfferGetTripOffersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tripId'] != null) {
            queryParameters['TripId'] = requestParameters['tripId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/TripOffer/getTripOffers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TripOfferResponseDtoFromJSON));
    }

    /**
     */
    async apiTripOfferGetTripOffersGet(requestParameters: ApiTripOfferGetTripOffersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TripOfferResponseDto>> {
        const response = await this.apiTripOfferGetTripOffersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTripOfferOfferDeleteRaw(requestParameters: ApiTripOfferOfferDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/TripOffer/offer`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteTripOfferRequestDtoToJSON(requestParameters['deleteTripOfferRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTripOfferOfferDelete(requestParameters: ApiTripOfferOfferDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTripOfferOfferDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTripOfferOfferPostRaw(requestParameters: ApiTripOfferOfferPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/TripOffer/offer`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOfferRequestDtoToJSON(requestParameters['createOfferRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTripOfferOfferPost(requestParameters: ApiTripOfferOfferPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTripOfferOfferPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTripOfferOfferPutRaw(requestParameters: ApiTripOfferOfferPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/TripOffer/offer`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOfferRequestDtoToJSON(requestParameters['updateOfferRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTripOfferOfferPut(requestParameters: ApiTripOfferOfferPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTripOfferOfferPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTripOfferPayedOfferPostRaw(requestParameters: ApiTripOfferPayedOfferPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/TripOffer/payedOffer`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayedOfferRequestDtoToJSON(requestParameters['payedOfferRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTripOfferPayedOfferPost(requestParameters: ApiTripOfferPayedOfferPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTripOfferPayedOfferPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTripOfferStartTripPostRaw(requestParameters: ApiTripOfferStartTripPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/TripOffer/startTrip`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartTripRequestDtoToJSON(requestParameters['startTripRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTripOfferStartTripPost(requestParameters: ApiTripOfferStartTripPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTripOfferStartTripPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTripOfferStateMovementsGetRaw(requestParameters: ApiTripOfferStateMovementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TripOfferMovementsResponseDto>>> {
        if (requestParameters['tripId'] == null) {
            throw new runtime.RequiredError(
                'tripId',
                'Required parameter "tripId" was null or undefined when calling apiTripOfferStateMovementsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tripId'] != null) {
            queryParameters['TripId'] = requestParameters['tripId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/TripOffer/stateMovements`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TripOfferMovementsResponseDtoFromJSON));
    }

    /**
     */
    async apiTripOfferStateMovementsGet(requestParameters: ApiTripOfferStateMovementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TripOfferMovementsResponseDto>> {
        const response = await this.apiTripOfferStateMovementsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
