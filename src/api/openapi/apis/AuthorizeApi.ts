/* tslint:disable */
/* eslint-disable */
/**
 * My API Merin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessTokenDto,
  ChangePasswordRequestDto,
  ErrorResponseDto,
  ForgetPasswordRequestDto,
  LoginRequestDto,
  LoginResponseDto,
  RefreshTokenRequestDto,
} from '../models/index';
import {
    AccessTokenDtoFromJSON,
    AccessTokenDtoToJSON,
    ChangePasswordRequestDtoFromJSON,
    ChangePasswordRequestDtoToJSON,
    ErrorResponseDtoFromJSON,
    ErrorResponseDtoToJSON,
    ForgetPasswordRequestDtoFromJSON,
    ForgetPasswordRequestDtoToJSON,
    LoginRequestDtoFromJSON,
    LoginRequestDtoToJSON,
    LoginResponseDtoFromJSON,
    LoginResponseDtoToJSON,
    RefreshTokenRequestDtoFromJSON,
    RefreshTokenRequestDtoToJSON,
} from '../models/index';

export interface ApiAuthorizeChangePasswordPostRequest {
    changePasswordRequestDto?: ChangePasswordRequestDto;
}

export interface ApiAuthorizeForgetPasswordPostRequest {
    forgetPasswordRequestDto?: ForgetPasswordRequestDto;
}

export interface ApiAuthorizeLoginPostRequest {
    loginRequestDto?: LoginRequestDto;
}

export interface ApiAuthorizeRefreshPostRequest {
    refreshTokenRequestDto?: RefreshTokenRequestDto;
}

/**
 * 
 */
export class AuthorizeApi extends runtime.BaseAPI {

    /**
     */
    async apiAuthorizeChangePasswordPostRaw(requestParameters: ApiAuthorizeChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Authorize/changePassword`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordRequestDtoToJSON(requestParameters['changePasswordRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthorizeChangePasswordPost(requestParameters: ApiAuthorizeChangePasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthorizeChangePasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuthorizeDontTouchGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Authorize/dontTouch`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthorizeDontTouchGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthorizeDontTouchGetRaw(initOverrides);
    }

    /**
     */
    async apiAuthorizeForgetPasswordPostRaw(requestParameters: ApiAuthorizeForgetPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Authorize/forgetPassword`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgetPasswordRequestDtoToJSON(requestParameters['forgetPasswordRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthorizeForgetPasswordPost(requestParameters: ApiAuthorizeForgetPasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthorizeForgetPasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuthorizeLoginPostRaw(requestParameters: ApiAuthorizeLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Authorize/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestDtoToJSON(requestParameters['loginRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthorizeLoginPost(requestParameters: ApiAuthorizeLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponseDto> {
        const response = await this.apiAuthorizeLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthorizeRefreshPostRaw(requestParameters: ApiAuthorizeRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokenDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Authorize/refresh`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenRequestDtoToJSON(requestParameters['refreshTokenRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthorizeRefreshPost(requestParameters: ApiAuthorizeRefreshPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokenDto> {
        const response = await this.apiAuthorizeRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
