/* tslint:disable */
/* eslint-disable */
/**
 * My API Merin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransferInfoResponseDto } from './TransferInfoResponseDto';
import {
    TransferInfoResponseDtoFromJSON,
    TransferInfoResponseDtoFromJSONTyped,
    TransferInfoResponseDtoToJSON,
    TransferInfoResponseDtoToJSONTyped,
} from './TransferInfoResponseDto';
import type { UserAddressResponseDto } from './UserAddressResponseDto';
import {
    UserAddressResponseDtoFromJSON,
    UserAddressResponseDtoFromJSONTyped,
    UserAddressResponseDtoToJSON,
    UserAddressResponseDtoToJSONTyped,
} from './UserAddressResponseDto';
import type { TransporterRequirementsResponseDto } from './TransporterRequirementsResponseDto';
import {
    TransporterRequirementsResponseDtoFromJSON,
    TransporterRequirementsResponseDtoFromJSONTyped,
    TransporterRequirementsResponseDtoToJSON,
    TransporterRequirementsResponseDtoToJSONTyped,
} from './TransporterRequirementsResponseDto';
import type { NotificationsEnum } from './NotificationsEnum';
import {
    NotificationsEnumFromJSON,
    NotificationsEnumFromJSONTyped,
    NotificationsEnumToJSON,
    NotificationsEnumToJSONTyped,
} from './NotificationsEnum';

/**
 * 
 * @export
 * @interface UserSettingsResponseDto
 */
export interface UserSettingsResponseDto {
    /**
     * 
     * @type {string}
     * @memberof UserSettingsResponseDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserSettingsResponseDto
     */
    surname: string;
    /**
     * 
     * @type {string}
     * @memberof UserSettingsResponseDto
     */
    phoneNumber: string;
    /**
     * 
     * @type {string}
     * @memberof UserSettingsResponseDto
     */
    ico: string;
    /**
     * 
     * @type {string}
     * @memberof UserSettingsResponseDto
     */
    dic: string;
    /**
     * 
     * @type {string}
     * @memberof UserSettingsResponseDto
     */
    companyName: string;
    /**
     * 
     * @type {Array<NotificationsEnum>}
     * @memberof UserSettingsResponseDto
     */
    notifications: Array<NotificationsEnum>;
    /**
     * 
     * @type {boolean}
     * @memberof UserSettingsResponseDto
     */
    isCompany: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserSettingsResponseDto
     */
    isVerifiedForTransporting: boolean;
    /**
     * 
     * @type {UserAddressResponseDto}
     * @memberof UserSettingsResponseDto
     */
    address?: UserAddressResponseDto;
    /**
     * 
     * @type {UserAddressResponseDto}
     * @memberof UserSettingsResponseDto
     */
    mailingAddress?: UserAddressResponseDto;
    /**
     * 
     * @type {TransferInfoResponseDto}
     * @memberof UserSettingsResponseDto
     */
    transferInfo?: TransferInfoResponseDto;
    /**
     * 
     * @type {TransporterRequirementsResponseDto}
     * @memberof UserSettingsResponseDto
     */
    transporterRequirements?: TransporterRequirementsResponseDto;
}

/**
 * Check if a given object implements the UserSettingsResponseDto interface.
 */
export function instanceOfUserSettingsResponseDto(value: object): value is UserSettingsResponseDto {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('surname' in value) || value['surname'] === undefined) return false;
    if (!('phoneNumber' in value) || value['phoneNumber'] === undefined) return false;
    if (!('ico' in value) || value['ico'] === undefined) return false;
    if (!('dic' in value) || value['dic'] === undefined) return false;
    if (!('companyName' in value) || value['companyName'] === undefined) return false;
    if (!('notifications' in value) || value['notifications'] === undefined) return false;
    if (!('isCompany' in value) || value['isCompany'] === undefined) return false;
    if (!('isVerifiedForTransporting' in value) || value['isVerifiedForTransporting'] === undefined) return false;
    return true;
}

export function UserSettingsResponseDtoFromJSON(json: any): UserSettingsResponseDto {
    return UserSettingsResponseDtoFromJSONTyped(json, false);
}

export function UserSettingsResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSettingsResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'surname': json['surname'],
        'phoneNumber': json['phoneNumber'],
        'ico': json['ico'],
        'dic': json['dic'],
        'companyName': json['companyName'],
        'notifications': ((json['notifications'] as Array<any>).map(NotificationsEnumFromJSON)),
        'isCompany': json['isCompany'],
        'isVerifiedForTransporting': json['isVerifiedForTransporting'],
        'address': json['address'] == null ? undefined : UserAddressResponseDtoFromJSON(json['address']),
        'mailingAddress': json['mailingAddress'] == null ? undefined : UserAddressResponseDtoFromJSON(json['mailingAddress']),
        'transferInfo': json['transferInfo'] == null ? undefined : TransferInfoResponseDtoFromJSON(json['transferInfo']),
        'transporterRequirements': json['transporterRequirements'] == null ? undefined : TransporterRequirementsResponseDtoFromJSON(json['transporterRequirements']),
    };
}

export function UserSettingsResponseDtoToJSON(json: any): UserSettingsResponseDto {
    return UserSettingsResponseDtoToJSONTyped(json, false);
}

export function UserSettingsResponseDtoToJSONTyped(value?: UserSettingsResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'surname': value['surname'],
        'phoneNumber': value['phoneNumber'],
        'ico': value['ico'],
        'dic': value['dic'],
        'companyName': value['companyName'],
        'notifications': ((value['notifications'] as Array<any>).map(NotificationsEnumToJSON)),
        'isCompany': value['isCompany'],
        'isVerifiedForTransporting': value['isVerifiedForTransporting'],
        'address': UserAddressResponseDtoToJSON(value['address']),
        'mailingAddress': UserAddressResponseDtoToJSON(value['mailingAddress']),
        'transferInfo': TransferInfoResponseDtoToJSON(value['transferInfo']),
        'transporterRequirements': TransporterRequirementsResponseDtoToJSON(value['transporterRequirements']),
    };
}

