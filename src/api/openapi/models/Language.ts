/* tslint:disable */
/* eslint-disable */
/**
 * My API Merin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * 
 * @export
 */
export const Language = {
    XX: 'XX',
    AF: 'af',
    SQ: 'sq',
    AM: 'am',
    AR: 'ar',
    HY: 'hy',
    AZ: 'az',
    EU: 'eu',
    BE: 'be',
    BN: 'bn',
    BS: 'bs',
    BG: 'bg',
    MY: 'my',
    CA: 'ca',
    ZH: 'zh',
    ZH_CN: 'zh-CN',
    ZH_HK: 'zh-HK',
    ZH_TW: 'zh-TW',
    HR: 'hr',
    CS: 'cs',
    DA: 'da',
    NL: 'nl',
    EN: 'en',
    EN_AU: 'en-AU',
    EN_GB: 'en-GB',
    ET: 'et',
    FA: 'fa',
    FI: 'fi',
    TL: 'tl',
    FR: 'fr',
    FR_CA: 'fr-CA',
    GL: 'gl',
    KA: 'ka',
    DE: 'de',
    EL: 'el',
    GU: 'gu',
    HE: 'he',
    HI: 'hi',
    HU: 'hu',
    IS: 'is',
    ID: 'id',
    IT: 'it',
    JA: 'ja',
    KN: 'kn',
    KK: 'kk',
    KM: 'km',
    KO: 'ko',
    KY: 'ky',
    LO: 'lo',
    LV: 'lv',
    LT: 'lt',
    MK: 'mk',
    MS: 'ms',
    ML: 'ml',
    MR: 'mr',
    LUS: 'lus',
    MN: 'mn',
    NE: 'ne',
    NO: 'no',
    PL: 'pl',
    PT: 'pt',
    PT_BR: 'pt-BR',
    PT_PT: 'pt-PT',
    PA: 'pa',
    RO: 'ro',
    RU: 'ru',
    SR: 'sr',
    SI: 'si',
    SK: 'sk',
    SL: 'sl',
    ES: 'es',
    ES_419: 'es-419',
    SW: 'sw',
    SV: 'sv',
    TA: 'ta',
    TE: 'te',
    TH: 'th',
    TR: 'tr',
    UK: 'uk',
    UR: 'ur',
    UZ: 'uz',
    VI: 'vi',
    ZU: 'zu',
    BG_LATN: 'bg-Latn'
} as const;
export type Language = typeof Language[keyof typeof Language];


export function instanceOfLanguage(value: any): boolean {
    for (const key in Language) {
        if (Object.prototype.hasOwnProperty.call(Language, key)) {
            if (Language[key as keyof typeof Language] === value) {
                return true;
            }
        }
    }
    return false;
}

export function LanguageFromJSON(json: any): Language {
    return LanguageFromJSONTyped(json, false);
}

export function LanguageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Language {
    return json as Language;
}

export function LanguageToJSON(value?: Language | null): any {
    return value as any;
}

export function LanguageToJSONTyped(value: any, ignoreDiscriminator: boolean): Language {
    return value as Language;
}

