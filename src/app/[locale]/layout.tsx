import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import {Header} from "@/src/components/compositions/header/header";
import {AppProvider} from "@/src/app/contexts/AppContext";
import {AppLoader} from "@/src/components/components/app-loader/app-loader";
import {NextIntlClientProvider, hasLocale} from 'next-intl';
import {notFound} from 'next/navigation';
import {routing} from "@/src/i18n/routing";
import NextAuthProvider from "@/src/app/contexts/NextAuthContext";
import {AuthorizationService} from "@/src/services/AuthorizationService";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

interface IRootLayoutProps {
    children: React.ReactNode;
    params: Promise<{locale: string}>;
}

export default async function RootLayout(props: IRootLayoutProps) {
    const {params, children} = props;
    const {locale} = await params;
    const user = await AuthorizationService.getLoggerUser();
    if (!hasLocale(routing.locales, locale)) {
        notFound();
    }

    return <html lang={locale}>
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
            <NextIntlClientProvider>
                <NextAuthProvider userId={user?.id || 0}>
                    <AppProvider>
                        <AppLoader />
                        <Header />
                        {children}
                    </AppProvider>
                </NextAuthProvider>
            </NextIntlClientProvider>
        </body>
    </html>
}